{"version":3,"sources":["camera.js","utilities.js","App.js","index.js"],"names":["camera","width","height","createObjects","console","log","document","getElementsByTagName","video","createElement","id","autoplay","body","appendChild","canvas","context","startCamera","w","h","navigator","mediaDevices","getUserMedia","this","getElementById","getContext","facingMode","exact","then","stream","srcObject","play","takeSnapshot","pause","videoElement","getCtx","labelMap","0","name","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","signs","i","length","x","y","text","strokeStyle","lineWidth","fillStyle","font","push","beginPath","fillText","Math","round","rect","stroke","output","pl","require","Recipe","props","ing","React","useState","recipe","setRecipe","className","onClick","e","ingredientArray","session","create","consult","success","query","sort","goal","answer","format_answer","error","err","style","target","href","clientWidth","App","ingredients","setIngredients","a","model","cvstfjs","loadModelAsync","image","executeAsync","result","useEffect","theWidth","isMobile","useMediaQuery","mobile","marginTop","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0b956d3.chunk.js","sourcesContent":["// import { constraints } from \"@tensorflow/tfjs-layers\";\r\n\r\nconst camera = function () {\r\n    let width = 0;\r\n    let height = 0;\r\n    \r\n    const createObjects = function () {\r\n    \r\n        console.log(document.getElementsByTagName('body'))\r\n        const video = document.createElement('video');\r\n        video.id = 'video';\r\n        video.width = width;\r\n        video.height = height;\r\n        video.autoplay = true;\r\n        document.body.appendChild(video);\r\n    \r\n        const canvas = document.createElement('canvas');\r\n        canvas.id = 'canvas';\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        document.body.appendChild(canvas);\r\n\r\n        \r\n    }\r\n    \r\n    \r\n    return {\r\n        video: null,\r\n        context: null,\r\n        canvas: null,\r\n    \r\n        startCamera: function (w = 680, h = 480) {\r\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n                width = w;\r\n                height = h;\r\n    \r\n                createObjects();\r\n    \r\n                this.video = document.getElementById('video');\r\n                this.canvas = document.getElementById('canvas');\r\n                this.context = this.canvas.getContext('2d');\r\n    \r\n    \r\n                (function (video) {\r\n                    navigator.mediaDevices.getUserMedia({ video: { facingMode: { exact: \"environment\" } } }).then(function (stream) {\r\n                        video.srcObject = stream;\r\n                        video.play();\r\n                    });\r\n                })(this.video)\r\n    \r\n            }\r\n        },\r\n    \r\n        takeSnapshot: function () {\r\n            // this.canvas.width = width;\r\n            // this.canvas.height = height;\r\n            // this.context.drawImage(this.video, 0, 0, width, height);\r\n            this.video.pause()\r\n        },\r\n\r\n        videoElement: function() {\r\n            console.log(this.video.height)\r\n            return this.video\r\n        },\r\n\r\n        getCtx: function(){\r\n            return this.canvas.getContext('2d');\r\n        }\r\n    \r\n    }\r\n    }();\r\n    \r\n    export default camera;","import camera from \"./camera.js\"\r\n\r\n// Define our labelmap\r\nexport const labelMap = {\r\n    0:{name: 'almond'},\r\n    1:{name: 'apple'},\r\n    2:{name: 'asparagus'},\r\n    3:{name: 'avocado'},\r\n    4:{name: 'baby corn'},\r\n    5:{name: 'bacon'},\r\n    6:{name: 'bagel'},\r\n    7:{name: 'balsamic vinegar'},\r\n    8:{name: 'banana'},\r\n    9:{name: 'bean'},\r\n    10:{name: 'bell pepper'},\r\n    11:{name: 'blackberry'},\r\n    12:{name: 'blueberry'},\r\n    13:{name: 'bread'},\r\n    14:{name: 'brocolli'},\r\n    15:{name: 'butter'},\r\n    16:{name: 'carrot'},\r\n    17:{name: 'cheese'},\r\n    18:{name: 'chicken'},\r\n    19:{name: 'chocolate'},\r\n    20:{name: 'cookie'},\r\n    21:{name: 'cream cheese'},\r\n    22:{name: 'egg'},\r\n    23:{name: 'garlic'},\r\n    24:{name: 'green beans'},\r\n    25:{name: 'ground beef'},\r\n    26:{name: 'ham'},\r\n    27:{name: 'honey'},\r\n    28:{name: 'ice cream'},\r\n    29:{name: 'ketchup'},\r\n    30:{name: 'lasagna noodle'},\r\n    31:{name: 'lettuce'},\r\n    32:{name: 'lunch meat'},\r\n    33:{name: 'marshmallow'},\r\n    34:{name: 'mayonnaise'},\r\n    35:{name: 'milk'},\r\n    36:{name: 'mushroom'},\r\n    37:{name: 'mustard'},\r\n    38:{name: 'noodle'},\r\n    39:{name: 'oatmeal'},\r\n    40:{name: 'onion'},\r\n    41:{name: 'potato'},\r\n    42:{name: 'sausage'},\r\n    43:{name: 'shredded cheese'},\r\n    44:{name: 'strawberry'},\r\n    45:{name: 'sugar'},\r\n    46:{name: 'sweet potatoes'},\r\n    47:{name: 'tomato'},\r\n    48:{name: 'tortillas'},\r\n    49:{name: 'yogurt'}\r\n}\r\n\r\n// Define a drawing function\r\nexport const drawRect = (boxes, classes, scores, threshold, imgWidth, imgHeight, ctx) => {\r\n    let signs = []\r\n    for(let i = 0; i <= boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            // Extract variables\r\n            // const [y,x,height,width] = boxes[i];\r\n            // const [x,y,width, height] = boxes[i];\r\n            const x = boxes[i][0];\r\n            const y = boxes[i][1];\r\n            const width = boxes[i][2];\r\n            const height = boxes[i][3];\r\n            const text = classes[i];\r\n\r\n            // Set styling\r\n            ctx.strokeStyle = 'green';\r\n            ctx.lineWidth = 10;\r\n            ctx.fillStyle = 'white';\r\n            ctx.font = '30px Arial';\r\n\r\n            signs.push(labelMap[text]['name']);\r\n            // console.log(labelMap[text]['name']);\r\n\r\n            // DRAW!!\r\n            ctx.beginPath();\r\n            ctx.fillText(labelMap[text]['name']+ ' - ' +Math.round(scores[i]*100)/100, x*imgWidth, y*imgHeight-10);\r\n            // ctx.fillText(\"something\", x*imgWidth, y*imgHeight-10);\r\n            ctx.rect(x*imgWidth, y*imgHeight, width*imgWidth/2, height*imgHeight/1.5);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport const output = (boxes, classes, scores, threshold) => {\r\n    let signs = []\r\n    for(let i = 0; i <= boxes.length; i++){\r\n        if(boxes[i] && classes[i] && scores[i]>threshold){\r\n            const text = classes[i];\r\n            signs.push(labelMap[text]['name']);\r\n        }\r\n    }\r\n    return signs;\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport camera from \"./camera.js\"\r\nimport * as cvstfjs from '@microsoft/customvision-tfjs';\r\nimport { useMediaQuery } from 'react-responsive'\r\n// 2. TODO - Import drawing utility here\r\n// e.g. import { drawRect } from \"./utilities\";\r\nimport {output, drawRect} from \"./utilities\"\r\nvar pl = require(\"tau-prolog\");\r\n\r\n//     const videoConstraints = {\r\n//       facingMode: { exact: \"environment\" }\r\n//     };\r\n//     tf.ENV.set('WEBGL_CONV_IM2COL', false);\r\nconsole.log(document.getElementById('root').clientWidth)\r\n// if(window.screen.width <= 655){\r\n//   camera.startCamera(window.screen.width-20,360);\r\n// }else{\r\n//   camera.startCamera(480,360);\r\n// }\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const [ingredients, setIngredients] = React.useState([]);\r\n  \r\n//   // const backend = tf.backend();\r\n\r\n//   // Main function\r\n//   const runCoco = async () => {\r\n//     // 3. TODO - Load network \r\n//     // e.g. const net = await cocossd.load();\r\n//     // https://raw.githubusercontent.com/Ethan-M-123/ObjDetectModel/main/cvai%20model/model.json\r\n//     // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\r\n//     // https://raw.githubusercontent.com/hugozanini/TFJS-object-detection/master/models/kangaroo-detector/model.json\r\n//     // const net = await tf.loadGraphModel('https://raw.githubusercontent.com/SaschaDittmann/tfjs-cv-objectdetection/master/static/model/model.json');\r\n//     // https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json\r\n//     const net = await tf.loadGraphModel('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n    \r\n//     //  Loop and detect hands\r\n//     setInterval(() => {\r\n//       detect(net);\r\n//     }, 16.7);\r\n\r\n\r\n\r\n    \r\n//   };\r\n\r\n//   // function _logistic(x) {\r\n//   //   if (x > 0) {\r\n//   //       return (1 / (1 + Math.exp(-x)));\r\n//   //   } else {\r\n//   //       const e = Math.exp(x);\r\n//   //       return e / (1 + e);\r\n//   //   }\r\n//   // }\r\n\r\n//   const detect = async (net) => {\r\n    \r\n    \r\n//     // let model = new cvstfjs.ObjectDetectionModel();\r\n//     // await model.loadModelAsync('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n//     // const image = document.getElementById('video');\r\n//     // const result = await model.executeAsync(image);\r\n//     // console.log(result);\r\n\r\n//     // Check data is available\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//     //   // Get Video Properties\r\n//       const video = webcamRef.current.video;\r\n//       const videoWidth = webcamRef.current.video.videoWidth;\r\n//       const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n//     //   // Set video width\r\n//       webcamRef.current.video.width = videoWidth;\r\n//       webcamRef.current.video.height = videoHeight;\r\n\r\n//     //   // Set canvas height and width\r\n//       canvasRef.current.width = videoWidth;\r\n//       canvasRef.current.height = videoHeight;\r\n\r\n//     //   // const backend = tf.backend();\r\n\r\n//     //   const ANCHORS = [0.573, 0.677, 1.87, 2.06, 3.34, 5.47, 7.88, 3.53, 9.77, 9.17];\r\n//     //   // tf.engine().startScope();\r\n//     //   // 4. TODO - Make Detections\r\n//       const img = tf.browser.fromPixels(video);\r\n//     //   let outputs = tf.tidy( () =>{\r\n//     //     let img = tf.browser.fromPixels(video);\r\n//     //     // const resized = tf.image.resizeBilinear(img, [640,480]);\r\n//         const resized = tf.image.resizeBilinear(img, [416,416]);\r\n//     //     // let newImg = tf.image.resizeBilinear(img.expandDims().toFloat(), [416,416]);\r\n//     //     // const casted = resized.cast('int32');\r\n//         const casted = resized.cast('float32');\r\n//         // const expanded = casted.expandDims(0);\r\n//     //     const newImg = casted.expandDims(0);\r\n//     //     // try{\r\n//     //       // return await net.execute(newImg);\r\n//     //       return net.execute(newImg);\r\n//     //   })\r\n      \r\n//     //     // const obj = await net.execute(expanded);\r\n//     //     // const tensor = await obj.arraySync();\r\n//     //     const arrays = !Array.isArray(outputs) ? outputs.array() : Promise.all(outputs.map(t => t.array()));\r\n//     //     let predictions = await arrays;\r\n      \r\n//     //     // console.log(outputs);\r\n        \r\n        \r\n//     //       const num_anchor = ANCHORS.length / 2;\r\n//     //       const channels = predictions[0][0][0].length;\r\n//     //       const height = predictions[0].length;\r\n//     //       const width = predictions[0][0].length;\r\n\r\n//     //       const num_class = channels / num_anchor - 5;\r\n\r\n// \t\t//       let boxes = [];\r\n// \t  //     \tlet scores = [];\r\n// \t\t//       let classes = [];\r\n\r\n//     //       // for (var grid_y = 0; grid_y < height; grid_y++) {\r\n//     //       //   for (var grid_x = 0; grid_x < width; grid_x++) {\r\n//     //       //     let offset = 0;\r\n      \r\n//     //       //     for (var i = 0; i < num_anchor; i++) {\r\n//     //       //       let x = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_x) / width;\r\n//     //       //       let y = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_y) / height;\r\n//     //       //       let w = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2] / width;\r\n//     //       //       let h = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2 + 1] / height;\r\n      \r\n//     //       //       let objectness = tf.scalar(_logistic(predictions[0][grid_y][grid_x][offset++]));\r\n//     //       //       let class_probabilities = tf.tensor1d(predictions[0][grid_y][grid_x].slice(offset, offset + num_class)).softmax();\r\n//     //       //       offset += num_class;\r\n      \r\n//     //       //       class_probabilities = class_probabilities.mul(objectness);\r\n//     //       //       let max_index = class_probabilities.argMax();\r\n//     //       //       boxes.push([x - w / 2, y - h / 2, x + w / 2, y + h / 2]);\r\n//     //       //       scores.push(class_probabilities.max().dataSync()[0]);\r\n//     //       //       classes.push(max_index.dataSync()[0]);\r\n//     //       //     }\r\n//     //       //   }\r\n//     //       // }\r\n           \r\n           \r\n//     //       let newStuff = tf.tidy(()=>{\r\n//     //       for(let j = 0; j < height*width; j++){\r\n//     //         var grid_y = Math.floor(j / width);\r\n//     //         var grid_x = j % width;\r\n            \r\n//     //         let offset = 0;\r\n      \r\n//     //           for (var i = 0; i < num_anchor; i++) {\r\n//     //             tf.tidy(()=>{\r\n//     //               let x = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_x) / width;\r\n//     //               let y = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_y) / height;\r\n//     //               let w = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2] / width;\r\n//     //               let h = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2 + 1] / height;\r\n        \r\n//     //               let objectness = tf.scalar(_logistic(predictions[0][grid_y][grid_x][offset++]));\r\n//     //               let class_probabilities = tf.tensor1d(predictions[0][grid_y][grid_x].slice(offset, offset + num_class)).softmax();\r\n//     //               offset += num_class;\r\n        \r\n//     //               class_probabilities = class_probabilities.mul(objectness);\r\n//     //               tf.dispose(objectness)\r\n//     //               let max_index = class_probabilities.argMax();\r\n//     //               boxes.push([x - w / 2, y - h / 2, x + w / 2, y + h / 2]);\r\n//     //               scores.push(class_probabilities.max().dataSync()[0]);\r\n//     //               classes.push(max_index.dataSync()[0]);\r\n//     //               tf.dispose(class_probabilities)\r\n//     //               }\r\n//     //             )\r\n//     //           }\r\n\r\n//     //       }\r\n\r\n//     //       let new_boxes = tf.tensor2d(boxes);\r\n// \t\t//       let new_scores = tf.tensor1d(scores);\r\n// \t\t//       let new_classes = tf.tensor1d(classes);\r\n//     //         return [new_boxes, new_scores, new_classes]}\r\n//     //       )\r\n\r\n//     //       const selected_indices = await tf.image.nonMaxSuppressionAsync(newStuff[0], newStuff[1], 10);\r\n//     //       let box_index = await newStuff[0].gather(selected_indices);\r\n//     //       let score_index = await newStuff[1].gather(selected_indices);\r\n//     //       let class_index = await newStuff[2].gather(selected_indices)\r\n// \t\t//       let newPredictions = [box_index.array(), score_index.array(), class_index.array()];\r\n\r\n//     //       // const selected_indices = tf.image.nonMaxSuppression(boxes, scores, 10)[1];\r\n// \t\t//       // predictions = [boxes.gather(selected_indices).array()[1], scores.gather(selected_indices).array()[1], classes.gather(selected_indices).array()[1]];\r\n//     //       // predictions = [await boxes.gather(selected_indices).arraySync(), await scores.gather(selected_indices).arraySync(), await classes.gather(selected_indices).arraySync()];\r\n//         let model = new cvstfjs.ObjectDetectionModel();\r\n//         await model.loadModelAsync('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n//         // const image = document.getElementById('video');\r\n//         // const result = await model.executeAsync(image);\r\n//         const result = await model.executeAsync(video);\r\n//         console.log(result);\r\n        \r\n\r\n//     //     // console.log(predictions);\r\n\r\n//         let newerBoxes = await result[0];\r\n//         let newerClasses = await result[2];\r\n//         let newerScores = await result[1];\r\n\r\n//     //     // const boxes = await obj[0];\r\n//     //     // const classes = await obj[5];\r\n//     //     // const scores = await obj[4];\r\n\r\n  \r\n\r\n//         console.log(\"boxes: \" + newerBoxes);\r\n//         console.log(\"Classes: \" + newerClasses);\r\n//         console.log(\"Scores: \"+ newerScores);\r\n\r\n//     //     // Draw mesh\r\n//     //     const ctx = canvasRef.current.getContext(\"2d\");\r\n//         const ctx = camera.getCtx();\r\n\r\n//     //     // 5. TODO - Update drawing utility\r\n//     //     // drawSomething(obj, ctx)  \r\n//         requestAnimationFrame(()=>{drawRect(newerBoxes, newerClasses, newerScores, 0.1, 480, 360, ctx)});\r\n\r\n//         setIngredients(output(newerBoxes, newerClasses, newerScores, 0.1));\r\n\r\n//     //     // tf.dispose(img);\r\n//     //     // tf.dispose(newImg);\r\n//     //     // tf.dispose(resized);\r\n//     //     // tf.dispose(casted);\r\n//     //     // tf.dispose(expanded);\r\n//     //     // tf.dispose(obj);\r\n//     //     // tf.dispose(new_boxes);\r\n//     //     // tf.dispose(new_scores);\r\n//     //     // tf.dispose(new_classes);\r\n//     //     // tf.dispose(box_index);\r\n//     //     // tf.dispose(score_index);\r\n//     //     // tf.dispose(class_index);\r\n//     //     // tf.dispose(outputs);\r\n//     //     tf.dispose(selected_indices);\r\n//     //     tf.dispose(arrays);\r\n//     //     // tf.engine().endScope()\r\n\r\n\r\n//     //        tf.dispose(boxes);\r\n//     //     tf.dispose(scores);\r\n//     //     tf.dispose(classes);\r\n//     //     tf.dispose(newerBoxes);\r\n//     //     tf.dispose(newerScores);\r\n//     //     tf.dispose(newerClasses);\r\n//     //       tf.dispose(box_index);\r\n//     //     tf.dispose(score_index);\r\n//     //     tf.dispose(class_index);\r\n//     //     tf.dispose(selected_indices);\r\n//     //     tf.dispose(newStuff);\r\n//     //     tf.dispose(predictions);\r\n//     //     tf.dispose(newPredictions);\r\n//     //     tf.dispose(arrays);\r\n//     //     tf.dispose(outputs);\r\n//     //     // console.log(tf.memory().numTensors)\r\n//     //   // } catch(error){\r\n//     //     // // tf.dispose(img);\r\n//     //     // // tf.dispose(arrays);\r\n//     //     // tf.dispose(newImg);\r\n//     //     // tf.dispose(resized);\r\n//     //     // tf.dispose(casted);\r\n//     //     // // tf.dispose(expanded);\r\n//     //     // // tf.engine().endScope();\r\n//     //     // console.log(error);\r\n//     //   // }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(()=>{runCoco()},[]);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       {/* <header className=\"App-header\"> */}\r\n//         <h1 className=\"project-title\">The Lazy Chef</h1>\r\n//         <Webcam\r\n//           ref={webcamRef}\r\n//           videoConstraints={videoConstraints}\r\n//           muted={true} \r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n\r\n//             left: 0,\r\n//             right: 0,\r\n//             textAlign: \"center\",\r\n//             zindex: 9,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n\r\n//         <canvas\r\n//           ref={canvasRef}\r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n//             left: 0,\r\n//             right: 0,\r\n//             textAlign: \"center\",\r\n//             zindex: 8,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n//       {/* </header> */}\r\n//         <Recipe ing={ingredients}/>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nfunction App(){\r\n//   const ANCHORS = [0.573, 0.677, 1.87, 2.06, 3.34, 5.47, 7.88, 3.53, 9.77, 9.17];\r\n//   const NEW_OD_OUTPUT_TENSORS = ['detected_boxes', 'detected_scores', 'detected_classes'];\r\n//   let model;\r\n//   let tensor;\r\n//   let thePredictions;\r\n    let width;\r\n    let height;\r\n    const [ingredients, setIngredients] = React.useState([]);\r\n\r\n    React.useEffect(()=>{\r\n    // const [ingredients, setIngredients] = React.useState([]);\r\n    console.log(document.getElementById('root').clientWidth)\r\n    if(document.getElementById('root').clientWidth <= 595){\r\n      width = document.getElementById('root').clientWidth-50;\r\n      height = (480*width)/640\r\n      camera.startCamera(width,height);\r\n    }else{\r\n      width = 640;\r\n      height = 480;\r\n      camera.startCamera(width, height);\r\n    }}, [])\r\n\r\n//   function _logistic(x) {\r\n// \tif (x > 0) {\r\n// \t    return (1 / (1 + Math.exp(-x)));\r\n// \t} else {\r\n// \t    const e = Math.exp(x);\r\n// \t    return e / (1 + e);\r\n// \t}\r\n// }\r\n\r\n//   camera.startCamera();\r\n//   const detect = async ()=>{\r\n//     model = await tf.loadGraphModel('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json')\r\n//     let image = tf.tidy(()=>{\r\n      // const pixels = camera.videoElement();\r\n//       const input_size = model.inputs[0].shape[1];\r\n//       // console.log(input_size);\r\n//       let image = tf.browser.fromPixels(pixels, 3);\r\n//       image = tf.image.resizeBilinear(image.expandDims().toFloat(), [input_size, input_size])\r\n//       return image;\r\n//     });\r\n//     // const resized = tf.image.resizeBilinear(img, [640,480])\r\n//     // const casted = resized.cast('int32')\r\n//     // const expanded = casted.expandDims(0)\r\n//     // const obj = await net.executeAsync(expanded)\r\n//     // console.log(img);\r\n//     // tf.dispose(model);\r\n//     console.log(\"model in detect(): \"+model)\r\n//     tensor = image;\r\n//     console.log(\"image: \"+image)\r\n//     return image;\r\n//     let model = new cvstfjs.ObjectDetectionModel();\r\n//     await model.loadModelAsync('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n//     const image = document.getElementById('video');\r\n//     const result = await model.executeAsync(image);\r\n//     console.log(result);\r\n//   };\r\n\r\n//   const predictIngredients= async (inputs)=>{\r\n//     if(typeof model == \"undefined\"){\r\n//       model = await tf.loadGraphModel('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json')\r\n//     }\r\n//     console.log(\"model: \"+model);\r\n//     console.log(\"inputs: \"+inputs)\r\n//     // console.log(\"Number of tensors: \"+tf.memory().numTensors)\r\n//     console.log();\r\n//     inputs = tensor;\r\n//     const outputs = await model.executeAsync(inputs);\r\n// \t  const arrays = !Array.isArray(outputs) ? outputs.array() : Promise.all(outputs.map(t => t.array()));\r\n// \t  let predictions = await arrays;\r\n\r\n//     const num_anchor = ANCHORS.length / 2;\r\n// \t\tconst channels = predictions[0][0][0].length;\r\n// \t\tconst height = predictions[0].length;\r\n// \t\tconst width = predictions[0][0].length;\r\n\r\n// \t\tconst num_class = channels / num_anchor - 5;\r\n\r\n// \t\tlet boxes = [];\r\n// \t\tlet scores = [];\r\n// \t\tlet classes = [];\r\n\r\n// \t\tfor (var grid_y = 0; grid_y < height; grid_y++) {\r\n// \t\t\tfor (var grid_x = 0; grid_x < width; grid_x++) {\r\n// \t\t\t\tlet offset = 0;\r\n\r\n// \t\t\t\tfor (var i = 0; i < num_anchor; i++) {\r\n// \t\t\t\t\tlet x = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_x) / width;\r\n// \t\t\t\t\tlet y = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_y) / height;\r\n// \t\t\t\t\tlet w = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2] / width;\r\n// \t\t\t\t\tlet h = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2 + 1] / height;\r\n\r\n// \t\t\t\t\tlet objectness = tf.scalar(_logistic(predictions[0][grid_y][grid_x][offset++]));\r\n// \t\t\t\t\tlet class_probabilities = tf.tensor1d(predictions[0][grid_y][grid_x].slice(offset, offset + num_class)).softmax();\r\n// \t\t\t\t\toffset += num_class;\r\n\r\n// \t\t\t\t\tclass_probabilities = class_probabilities.mul(objectness);\r\n// \t\t\t\t\tlet max_index = class_probabilities.argMax();\r\n// \t\t\t\t\tboxes.push([x - w / 2, y - h / 2, x + w / 2, y + h / 2]);\r\n// \t\t\t\t\tscores.push(class_probabilities.max().dataSync()[0]);\r\n// \t\t\t\t\tclasses.push(max_index.dataSync()[0]);\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n//     boxes = tf.tensor2d(boxes);\r\n// \t\tscores = tf.tensor1d(scores);\r\n// \t\tclasses = tf.tensor1d(classes);\r\n\r\n// \t\tconst selected_indices = await tf.image.nonMaxSuppressionAsync(boxes, scores, 10);\r\n// \t\tpredictions = [await boxes.gather(selected_indices).array(), await scores.gather(selected_indices).array(), await classes.gather(selected_indices).array()];\r\n\r\n//     thePredictions = predictions;\r\n//     // console.log(thePredictions)\r\n//     return predictions;\r\n//   }\r\n\r\n  // async function highlightResults(predictions) {\r\n  //   console.log( \"Highlighting results...\" );\r\n  //   await $('.progress-bar').html(\"Highlighting results\").promise();\r\n  \r\n  //   removeHighlights();\r\n    \r\n  //   for (let n = 0; n < predictions[0].length; n++) {\r\n  //     // Check scores\r\n  //     if (predictions[1][n] > 0.66) {\r\n  //       const p = document.createElement('p');\r\n  //       p.innerText = TARGET_CLASSES[predictions[2][n]]  + ': ' \r\n  //         + Math.round(parseFloat(predictions[1][n]) * 100) \r\n  //         + '%';\r\n        \r\n  //       bboxLeft = (predictions[0][n][0] * selectedImage.width) + 10;\r\n  //       bboxTop = (predictions[0][n][1] * selectedImage.height) - 10;\r\n  //       bboxWidth = (predictions[0][n][2] * selectedImage.width) - bboxLeft + 20;\r\n  //       bboxHeight = (predictions[0][n][3] * selectedImage.height) - bboxTop + 10;\r\n        \r\n  //       p.style = 'margin-left: ' + bboxLeft + 'px; margin-top: '\r\n  //         + (bboxTop - 10) + 'px; width: ' \r\n  //         + bboxWidth + 'px; top: 0; left: 0;';\r\n  //       const highlighter = document.createElement('div');\r\n  //       highlighter.setAttribute('class', 'highlighter');\r\n  //       highlighter.style = 'left: ' + bboxLeft + 'px; top: '\r\n  //         + bboxTop + 'px; width: ' \r\n  //         + bboxWidth + 'px; height: '\r\n  //         + bboxHeight + 'px;';\r\n  //       imageOverlay.appendChild(highlighter);\r\n  //       imageOverlay.appendChild(p);\r\n  //       children.push(highlighter);\r\n  //       children.push(p);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // const loadImage = async () => {\r\n  //   return await detect();\r\n  // }\r\n\r\n  // const predictingIngredients = async (image) => {\r\n  //   return await predictIngredients(image);\r\n  // }\r\n\r\n  // // const resultsHighlight = async (predictions) =>{\r\n  // //   return await highlightResults(predictions)\r\n  // // }\r\n\r\n  // const theClass = async (predictions) =>{\r\n  //     return await predictions[2];\r\n  //   }\r\n  //   const theBox = async (predictions) =>{\r\n  //       return await predictions[0];\r\n  //     }\r\n  //     const theScore = async (predictions) =>{\r\n  //         return await predictions[1];\r\n  //       }\r\n\r\n  //       const arrayS = async (array) =>{\r\n  //         return await array;\r\n  //       }\r\n\r\n  // const predictAsync = (predictions) =>{\r\n  //   console.log(predictions);\r\n  //   thePredictions = predictions;\r\n  // }\r\n\r\n  async function detectIngredients(){\r\n    camera.takeSnapshot();\r\n  //   for(let i = 0; i<document.getElementsByClassName('video').length; i++){\r\n  //     document.getElementsByClassName('video')[i].pause();\r\n  // }\r\n    let model = new cvstfjs.ObjectDetectionModel();\r\n    await model.loadModelAsync('https://raw.githubusercontent.com/Ethan-M-123/TheLazyChef/main/model/model.json');\r\n    // const image = document.getElementById('canvas');\r\n    const image = document.getElementById('video');\r\n    const result = await model.executeAsync(image);\r\n    console.log(result);\r\n    // let newerBoxes = result[0];\r\n    //   let newerClasses = result[2];\r\n    //   let newerScores = result[1];\r\n\r\n    //   const ctx = camera.getCtx();\r\n\r\n\r\n    //   drawRect(newerBoxes, newerClasses, newerScores, 0.1, 480, 360, ctx)\r\n    // camera.takeSnapshot();\r\n    drawRect(result[0], result[2], result[1], 0.4, width,height, camera.getCtx())\r\n      \r\n      // console.log(output(result[0], result[2], result[1], 0.4));\r\n    setIngredients(output(result[0], result[2], result[1], 0.4));\r\n    // camera.takeSnapshot();\r\n  //      for(let i = 0; i<document.getElementsByClassName('video').length; i++){\r\n  //     document.getElementsByClassName('video')[i].pause();\r\n  // }\r\n  }\r\n    // camera.takeSnapshot();\r\n    // const image = loadImage();\r\n    // console.log(image)\r\n    // const predictions = predictingIngredients(image);\r\n    // predictions.then((array)=>{\r\n    //   console.log(array);\r\n      // let newerBoxes = result[0];\r\n      // let newerClasses = result[2];\r\n      // let newerScores = result[1];\r\n\r\n      // const ctx = camera.getCtx();\r\n\r\n      // drawRect(newerBoxes, newerClasses, newerScores, 0.3, 480, 360, ctx)\r\n      // console.log(\"boxes: \" + newerBoxes);\r\n      //         console.log(\"Classes: \" + newerClasses);\r\n      //         console.log(\"Scores: \"+ newerScores);\r\n    // });\r\n    // console.log(predictions);\r\n\r\n    // console.log(\"The Predictions: \" +predictions);\r\n    // const arrays = Promise.all(predictions);\r\n\t  // let thePredictions = arrayS()\r\n    // console.log(\"The Predictions: \" +thePredictions);\r\n\r\n        // let newerBoxes = theBox(predictions);\r\n        // let newerClasses = theClass(predictions);\r\n        // let newerScores = theScore(predictions);\r\n        // let newerBoxes = await newPredictions[0];\r\n        //          let newerClasses = await newPredictions[2];\r\n        //          let newerScores = await newPredictions[1];\r\n  \r\n\r\n        // console.log(newerBoxes);\r\n        // console.log(newerClasses);\r\n        // console.log(newerScores);\r\n    // resultsHighlight();\r\n    // console.log(\"Number of tensors: \"+tf.memory().numTensors)\r\n  // }\r\n  const isMobile = useMediaQuery({query: '(max-width: 578px)'})\r\n  let theHeight;\r\n  let theWidth\r\n  if(document.getElementById('root').clientWidth <= 595){\r\n    theWidth = document.getElementById('root').clientWidth-50;\r\n    // height = (480*width)/640\r\n  \r\n  }else{\r\n    theWidth = 640;\r\n    // height = 480;\r\n\r\n  }\r\n  isMobile? theHeight =(480*theWidth)/640+70 : theHeight = 535;\r\n\r\n  let mobile = {\r\n    marginTop: `${theHeight}px`\r\n  }\r\n\r\n  return(\r\n    <div id=\"div\" className=\"app-div\">\r\n      <h1 className=\"project-title\">The Lazy Chef</h1>\r\n      <button style={mobile}className=\"search-button\" onClick={detectIngredients}>\r\n        Snapshot\r\n      </button>\r\n      <Recipe ing={ingredients}/>\r\n  </div>\r\n  );\r\n\r\n}\r\n\r\nfunction Recipe(props){\r\n  console.log(\"Recipe: \"+props.ing)\r\n  const [recipe, setRecipe] = React.useState(\"\");\r\n\r\n  let lookup = {\r\n    \"X = zest.\": \"https://www.culinaryhill.com/how-to-zest-a-lemon/\",\r\n    \"X = breadAndNutella.\": \"https://www.foodnetwork.com/recipes/nutella-and-toast-recipe-1913728\",\r\n    \"X = avocadoToast.\": \"https://feelgoodfoodie.net/recipe/avocado-toast-with-egg-3-ways/\",\r\n    \"X = quesadilla.\": \"https://www.simplyrecipes.com/recipes/quesadilla/\",\r\n    \"X = eggAndCheeseToast.\": \"https://toasterovenlove.com/egg-and-cheese-toasts/\",\r\n    \"X = eggInHole.\": \"https://www.allrecipes.com/recipe/187850/egg-in-a-hole/\",\r\n    \r\n    // %breakfast\r\n    \"X = Sausage_Omelette.\": \"https://www.emerils.com/123033/pork-sausage-and-cheese-omelette\",\r\n    \"X = Bacon_Omelette.\": \"https://www.recipetips.com/recipe-cards/t--37341/bacon-and-cheese-omelette.asp\",\r\n    \"X = Lumberjack_Omelette.\": \"https://www.keyingredient.com/recipes/852875039/lumberjack-omelet/\",\r\n    \"X = Cheese_Omelette.\": \"https://www.epicurious.com/recipes/food/views/cheese-omelette-51262180\",\r\n    \"X = Cheesy_Bacon-Sausage-Egg-Hash_Brown_Skillet.\": \"https://www.allrecipes.com/recipe/261541/cheesy-bacon-sausage-egg-hash-brown-skillet/\",\r\n    \"X = Sausage_breakfast_Cassarole.\": \"https://www.simplyrecipes.com/recipes/sausage_breakfast_casserole/\",\r\n    \"X = Sheepherders_Breakfast.\": \"https://www.tasteofhome.com/recipes/sheepherder-s-breakfast/\",\r\n    \"X = Sausage_Breakfast_Burrito.\": \"https://www.tasteofhome.com/recipes/sausage-breakfast-burritos/\",\r\n    \"X = Bacon_Breakfast_Burrito.\": \"https://peasandcrayons.com/2019/03/bacon-breakfast-burrito.html\",\r\n    \"X = Combo_Breakfast_Burrito.\": \"https://tasty.co/recipe/bacon-sausage-egg-wrapped-breakfast-burrito\",\r\n    \"X = Cheesy_Hash_Brown_Bake.\": \"https://www.tasteofhome.com/recipes/cheesy-hash-brown-bake/\",\r\n    \"X = Berry_Smoothie.\": \"https://www.dinneratthezoo.com/mixed-berry-smoothie/\",\r\n    \"X = Sweet_Potato_and_Egg_Skillet.\": \"https://www.tasteofhome.com/recipes/sweet-potato-and-egg-skillet/\",\r\n    \"X = Hash_Brown_Egg_Bake.\": \"https://www.tasteofhome.com/recipes/hash-brown-egg-bake/\",\r\n    \r\n    \r\n    // %lunch\r\n    \"X = grilled_cheese.\": \"https://www.spendwithpennies.com/the-best-grilled-cheese-sandwich/\",\r\n    \"X = fancy_sandwich.\": \"https://californiaavocado.com/recipe/fresh-california-avocado-and-turkey-sandwich/\",\r\n    \"X = Summer_Blueberry_Almond_Salad.\": \"https://www.food.com/recipe/greens-with-blueberries-feta-and-almonds-301425\",\r\n    \"X = Baked_Potato.\": \"https://www.gimmesomeoven.com/baked-potato/\",\r\n    \"X = Cheese_Quesadilla.\": \"https://www.simplyrecipes.com/recipes/quesadilla/\",\r\n    \"X = Bean_and_Cheese_Burrito.\": \"https://www.isabeleats.com/bean-and-cheese-burritos/\",\r\n    \"X = Meat_Wrap.\": \"https://lmld.org/turkey-bacon-ranch-wraps/\",\r\n    \"X = Chef_Salad.\": \"https://www.spendwithpennies.com/chefs-salad/\",\r\n    \r\n    // %dinner\r\n    \"X = Lasagna.\": \"https://www.spendwithpennies.com/easy-homemade-lasagna/\",\r\n    \"X = Spaghetti.\": \"https://www.thewholesomedish.com/spaghetti/\",\r\n    \"X = Pizza.\": \"https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/\",\r\n    \"X = Chicken_Tacos.\": \"https://damndelicious.net/2019/08/06/easy-chicken-tacos/\",\r\n    \"X = Bacon_and_Egg_Pasta.\": \"https://www.foodnetwork.com/recipes/food-network-kitchen/bacon-and-egg-spaghetti-7232463\",\r\n    \"X = Brocolli_Mac&Cheese.\": \"https://www.dinneratthezoo.com/broccoli-mac-and-cheese/\",\r\n    \"X = Chicken_Bake.\": \"https://easyfamilyrecipes.com/million-dollar-chicken-bake/\",\r\n    \"X = Lemon_Garlic_Chicken.\": \"https://rasamalaysia.com/lemon-garlic-chicken/\",\r\n    \"X = Hefty_Wrap.\": \"https://www.withablast.net/deli-wraps/\",\r\n    \"X = Meatloaf.\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\r\n    \"X = Vegetable_Stir_Fry.\": \"https://www.dinneratthezoo.com/vegetable-stir-fry/\",\r\n    \r\n    // %dessert\r\n    \"X = ice_cream_sandwich.\": \"https://www.ifyougiveablondeakitchen.com/cookie-ice-cream-sandwich/\",\r\n    \"X = strawberry_milkshake.\": \"https://www.foodnetwork.com/recipes/fresh-strawberry-milkshakes-3644067\",\r\n    \"X = chocolate_milkshake.\": \"https://www.bettycrocker.com/recipes/chocolate-milkshakes/7b7f7d41-4e3f-4bfa-b148-f29cc2a6b135\",\r\n    \"X = smores.\": \"https://www.allrecipes.com/recipe/22146/smores/\",\r\n    \"X = Chocolate_Covered_Apple.\": \"https://www.allrecipes.com/recipe/63150/chocolate-dipped-apples/\"\r\n  }\r\n\r\n\r\n\r\n  function displayInfo(e){\r\n    let ingredientArray = props.ing\r\n    console.log(\"displayInfo: \"+ingredientArray)\r\n         // start tau prolog sesson\r\n    var session = pl.create();\r\n    // load recipes.pl file\r\n    const prolog = `\r\n    %Breakfast\r\n    recipe(egg, cheese, sausage, Sausage_Omelette).\r\n    recipe(egg, cheese, bacon, Bacon_Omelette).\r\n    recipe(egg, cheese, bacon, sausage, Lumberjack_Omelette).\r\n    recipe(egg, cheese, Cheese_Omelette).\r\n    recipe(egg, bacon, sausage, potato, bread, cheese, butter, milk, Cheesy_Bacon-Sausage-Egg-Hash_Brown_Skillet).\r\n    recipe(sausage, egg, milk, mustard, bread, shredded cheese, Sausage_breakfast_Cassarole).\r\n    recipe(bacon, onion, potato, egg, shredded cheese, Sheepherders_Breakfast).\r\n    recipe(sausage, egg, tortilla, potato, Sausage_Breakfast_Burrito).\r\n    recipe(bacon, egg tortilla, potato, Bacon_Breakfast_Burrito).\r\n    recipe(bacon, sausage, egg tortilla, potato, Combo_Breakfast_Burrito).\r\n    recipe(potato, shredded cheese, milk, shredded cheese, Cheesy_Hash_Brown_Bake).\r\n    recipe(strawberry, banana, blueberry, Berry_Smoothie).\r\n    recipe(butter, sweet potato, garlic, egg, Sweet_Potato_and_Egg_Skillet).\r\n    recipe(potato, bacon, shredded cheese, egg, milk, Hash_Brown_Egg_Bake).\r\n    \r\n    %lunch\r\n    recipe(bread, cheese, Grilled_cheese).\r\n    recipe(bread, lunch meat, cheese, tomato, avocado, fancy_sandwich).\r\n    recipe(lettuce, blueberry, almonds, balsamic vinegar, cheese, mustard, Summer_Blueberry_Almond_Salad).\r\n    recipe(potato, milk, shredded cheese, Baked_Potato).\r\n    recipe(tortilla, shredded cheese, Cheese_Quesadilla).\r\n    recipe(bean, tortilla, Bean and Cheese_Burrito).\r\n    recipe(tortilla, tomato, avocado, lunch meat, Wrap).\r\n    recipe(lunch meat, lettuce, shredded cheese, Chef_Salad).\r\n    \r\n    \r\n    \r\n    %Dinner\r\n    recipe(ground beef, lasagna noodle, tomato, shredded cheese, Lasagna).\r\n    recipe(noodle, tomatoes, Spaghetti).\r\n    recipe(bread, shredded cheese, tomatoes, Pizza).\r\n    recipe(tortilla, chicken, tomato, onion, Chicken_Tacos).\r\n    recipe(noodle, bacon, egg, Bacon_and_Egg_Pasta).\r\n    recipe(brocolli, noodle, shredded cheese, milk, Brocolli_Mac&Cheese).\r\n    recipe(chicken, tomato, shredded cheese, Chicken_Bake).\r\n    recipe(chicken, asparagus, lemon, garlic, Lemon_Garlic_Chicken).\r\n    recipe(lunch meat, avocado, tortilla, lettuce, carrot, Hefty_Wrap).\r\n    recipe(ground beef, onion, tomato, brocolli, sweet potato, ketchup, Meatloaf).\r\n    recipe(green bean, brocolli, baby corn, mushroom, bell pepper, cucumber, soy sauce, Vegetable_Stir_Fry).\r\n    \r\n    %dessert\r\n    recipe(cookie, ice cream, ice_cream_sandwich).\r\n    recipe(milk, strawberry, strawberry_milkshake).\r\n    recipe(milk, chocolate, chocolate_milkshake).\r\n    recipe(marshmallow, chocolate, smores).\r\n    recipe(apple, chocolate, Chocolate_Covered_Apple).\r\n    recipe(apple, strawberry, something).\r\n    `\r\n    session.consult(prolog, {\r\n      success:function(){\r\n        // query recipes.pl with list of ingredients\r\n        session.query(\"recipe(\"+ingredientArray.sort()+\", X).\", {\r\n          success: function(goal){\r\n            session.answer({\r\n              success: function(answer){\r\n                console.log(session.format_answer(answer));\r\n                // call display recipe with result of query\r\n                setRecipe(session.format_answer(answer));\r\n              }\r\n            });\r\n          }\r\n        })\r\n      },\r\n      error: function(err){\r\n        console.log(\"didn't work\")\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  return(\r\n    <>\r\n      <button id=\"search\" className=\"search-button\" onClick={displayInfo}>\r\n        Search\r\n      </button>\r\n      <div style={{height: 30}}></div>\r\n      <a className=\"link\" target=\"_blank\" href={lookup[recipe]} >{recipe}</a>\r\n      <div style={{height: 30}}></div>\r\n    </>\r\n  )\r\n}\r\n\r\n// export default App;\r\n\r\n// Import dependencies\r\n// import React, { useRef, useState, useEffect } from \"react\";\r\n// import * as tf from \"@tensorflow/tfjs\";\r\n// import Webcam from \"react-webcam\";\r\n// import * as cvstfjs from '@microsoft/customvision-tfjs';\r\n// import \"./App.css\";\r\n// // 2. TODO - Import drawing utility here\r\n// // e.g. import { drawRect } from \"./utilities\";\r\n// import {output, drawRect} from \"./utilities\"\r\n// var pl = require(\"tau-prolog\");\r\n\r\n//     const videoConstraints = {\r\n//       facingMode: { exact: \"user\" }\r\n//     };\r\n//     tf.ENV.set('WEBGL_CONV_IM2COL', false);\r\n\r\n\r\n// function App() {\r\n//   const webcamRef = useRef(null);\r\n//   const canvasRef = useRef(null);\r\n//   const [ingredients, setIngredients] = React.useState([]);\r\n\r\n//   // const backend = tf.backend();\r\n\r\n//   // Main function\r\n//   const runCoco = async () => {\r\n//     // 3. TODO - Load network \r\n//     // e.g. const net = await cocossd.load();\r\n//     // https://raw.githubusercontent.com/Ethan-M-123/ObjDetectModel/main/cvai%20model/model.json\r\n//     // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\r\n//     // https://raw.githubusercontent.com/hugozanini/TFJS-object-detection/master/models/kangaroo-detector/model.json\r\n//     // const net = await tf.loadGraphModel('https://raw.githubusercontent.com/SaschaDittmann/tfjs-cv-objectdetection/master/static/model/model.json');\r\n//     // https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json\r\n//     const net = await tf.loadGraphModel('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n    \r\n//     //  Loop and detect hands\r\n//     // setInterval(() => {\r\n//     //   detect(net);\r\n//     // }, 16.7);\r\n\r\n//     setInterval(() => {\r\n//       detect(net);\r\n//     }, 10);\r\n//   };\r\n\r\n//   // function _logistic(x) {\r\n//   //   if (x > 0) {\r\n//   //       return (1 / (1 + Math.exp(-x)));\r\n//   //   } else {\r\n//   //       const e = Math.exp(x);\r\n//   //       return e / (1 + e);\r\n//   //   }\r\n//   // }\r\n\r\n//   const detect = async (net) => {\r\n//     // Check data is available\r\n//     if (\r\n//       typeof webcamRef.current !== \"undefined\" &&\r\n//       webcamRef.current !== null &&\r\n//       webcamRef.current.video.readyState === 4\r\n//     ) {\r\n//       // Get Video Properties\r\n//       const video = webcamRef.current.video;\r\n//       const videoWidth = webcamRef.current.video.videoWidth;\r\n//       const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n//       // Set video width\r\n//       webcamRef.current.video.width = videoWidth;\r\n//       webcamRef.current.video.height = videoHeight;\r\n\r\n//       // Set canvas height and width\r\n//       canvasRef.current.width = videoWidth;\r\n//       canvasRef.current.height = videoHeight;\r\n\r\n//       // const backend = tf.backend();\r\n\r\n//       // const ANCHORS = [0.573, 0.677, 1.87, 2.06, 3.34, 5.47, 7.88, 3.53, 9.77, 9.17];\r\n//       // tf.engine().startScope();\r\n//       // 4. TODO - Make Detections\r\n//       // const img = tf.browser.fromPixels(video);\r\n//       let img = tf.browser.fromPixels(video);\r\n//       // const resized = tf.image.resizeBilinear(img, [640,480]);\r\n//       const resized = tf.image.resizeBilinear(img, [416,416]);\r\n//       // img = tf.image.resizeBilinear(img.expandDims().toFloat(), [416,416]);\r\n//       // const casted = resized.cast('int32');\r\n//       const casted = resized.cast('float32');\r\n//       const expanded = casted.expandDims(0);\r\n//       try{\r\n//         // const outputs = await net.execute(img);\r\n//         // const obj = await net.execute(expanded);\r\n//         // const tensor = await obj.arraySync();\r\n//         // const arrays = !Array.isArray(outputs) ? outputs.array() : Promise.all(outputs.map(t => t.array()));\r\n//         // let predictions = await arrays;\r\n//         // console.log(outputs);\r\n        \r\n        \r\n//           // const num_anchor = ANCHORS.length / 2;\r\n//           // const channels = predictions[0][0][0].length;\r\n//           // const height = predictions[0].length;\r\n//           // const width = predictions[0][0].length;\r\n\r\n//           // const num_class = channels / num_anchor - 5;\r\n\r\n// \t\t      // let boxes = [];\r\n// \t      \t// let scores = [];\r\n// \t\t      // let classes = [];\r\n\r\n//           // for (var grid_y = 0; grid_y < height; grid_y++) {\r\n//           //   for (var grid_x = 0; grid_x < width; grid_x++) {\r\n//           //     let offset = 0;\r\n      \r\n//           //     for (var i = 0; i < num_anchor; i++) {\r\n//           //       let x = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_x) / width;\r\n//           //       let y = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_y) / height;\r\n//           //       let w = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2] / width;\r\n//           //       let h = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2 + 1] / height;\r\n      \r\n//           //       let objectness = tf.scalar(_logistic(predictions[0][grid_y][grid_x][offset++]));\r\n//           //       let class_probabilities = tf.tensor1d(predictions[0][grid_y][grid_x].slice(offset, offset + num_class)).softmax();\r\n//           //       offset += num_class;\r\n      \r\n//           //       class_probabilities = class_probabilities.mul(objectness);\r\n//           //       let max_index = class_probabilities.argMax();\r\n//           //       boxes.push([x - w / 2, y - h / 2, x + w / 2, y + h / 2]);\r\n//           //       scores.push(class_probabilities.max().dataSync()[0]);\r\n//           //       classes.push(max_index.dataSync()[0]);\r\n//           //     }\r\n//           //   }\r\n//           // }\r\n\r\n//           // for(let j = 0; j < height*width; j++){\r\n//           //   var grid_y = Math.floor(j / width);\r\n//           //   var grid_x = j % width;\r\n            \r\n//           //   let offset = 0;\r\n      \r\n//           //     for (var i = 0; i < num_anchor; i++) {\r\n//           //       let x = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_x) / width;\r\n//           //       let y = (_logistic(predictions[0][grid_y][grid_x][offset++]) + grid_y) / height;\r\n//           //       let w = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2] / width;\r\n//           //       let h = Math.exp(predictions[0][grid_y][grid_x][offset++]) * ANCHORS[i * 2 + 1] / height;\r\n      \r\n//           //       let objectness = tf.scalar(_logistic(predictions[0][grid_y][grid_x][offset++]));\r\n//           //       let class_probabilities = tf.tensor1d(predictions[0][grid_y][grid_x].slice(offset, offset + num_class)).softmax();\r\n//           //       offset += num_class;\r\n      \r\n//           //       class_probabilities = class_probabilities.mul(objectness);\r\n//           //       tf.dispose(objectness)\r\n//           //       let max_index = class_probabilities.argMax();\r\n//           //       boxes.push([x - w / 2, y - h / 2, x + w / 2, y + h / 2]);\r\n//           //       scores.push(class_probabilities.max().dataSync()[0]);\r\n//           //       classes.push(max_index.dataSync()[0]);\r\n//           //       tf.dispose(class_probabilities)\r\n//           //     }\r\n\r\n//           // }\r\n\r\n//           // boxes = tf.tensor2d(boxes);\r\n// \t\t      // scores = tf.tensor1d(scores);\r\n// \t\t      // classes = tf.tensor1d(classes);\r\n\r\n//           // const selected_indices = await tf.image.nonMaxSuppressionAsync(boxes, scores, 10);\r\n// \t\t      // predictions = [await boxes.gather(selected_indices).array(), await scores.gather(selected_indices).array(), await classes.gather(selected_indices).array()];\r\n\r\n//           // const selected_indices = tf.image.nonMaxSuppression(boxes, scores, 10)[1];\r\n// \t\t      // predictions = [boxes.gather(selected_indices).array()[1], scores.gather(selected_indices).array()[1], classes.gather(selected_indices).array()[1]];\r\n//           // predictions = [await boxes.gather(selected_indices).arraySync(), await scores.gather(selected_indices).arraySync(), await classes.gather(selected_indices).arraySync()];\r\n\r\n//         let model = new cvstfjs.ObjectDetectionModel();\r\n//         await model.loadModelAsync('https://the-lazy-chef.s3.us-east.cloud-object-storage.appdomain.cloud/model.json');\r\n//         // const image = document.getElementById('video');\r\n//         const result = await model.executeAsync(expanded);\r\n//         console.log(result);\r\n\r\n//         // console.log(predictions);\r\n\r\n//         let boxes = await result[0];\r\n//         let classes = await result[2];\r\n//         let scores = await result[1];\r\n\r\n//         // const boxes = await obj[0];\r\n//         // const classes = await obj[5];\r\n//         // const scores = await obj[4];\r\n\r\n  \r\n\r\n//         // console.log(\"boxes[0]: \" + boxes[0]);\r\n//         // console.log(\"Classes[0][0]: \" + classes[0]);\r\n//         // console.log(\"Scores: \"+ scores[0]);\r\n\r\n//         // Draw mesh\r\n//         const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n//         // 5. TODO - Update drawing utility\r\n//         // drawSomething(obj, ctx)  \r\n//         requestAnimationFrame(()=>{drawRect(boxes, classes, scores, 0.1, videoWidth, videoHeight, ctx)});\r\n\r\n//         setIngredients(output(boxes, classes, scores, 0.1));\r\n\r\n//         tf.dispose(img);\r\n//         tf.dispose(resized);\r\n//         tf.dispose(casted);\r\n//         tf.dispose(expanded);\r\n//         // tf.dispose(obj);\r\n//         // tf.dispose(outputs);\r\n//         // tf.dispose(selected_indices);\r\n//         // tf.dispose(backend);\r\n//         console.log(tf.memory().numTensors)\r\n//         // tf.engine().endScope()\r\n//       } catch(error){\r\n//         tf.dispose(img);\r\n//         // tf.dispose(backend);\r\n//         tf.dispose(img);\r\n//         tf.dispose(resized);\r\n//         tf.dispose(casted);\r\n//         tf.dispose(expanded);\r\n//         // tf.engine().endScope();\r\n//         console.log(error);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   useEffect(()=>{runCoco()},[]);\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       {/* <header className=\"App-header\"> */}\r\n//         <h1 className=\"project-title\">The Lazy Chef</h1>\r\n//         <Webcam\r\n//           ref={webcamRef}\r\n//           videoConstraints={videoConstraints}\r\n//           muted={true} \r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n\r\n//             left: 0,\r\n//             right: 0,\r\n//             textAlign: \"center\",\r\n//             zindex: 9,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n\r\n//         <canvas\r\n//           ref={canvasRef}\r\n//           style={{\r\n//             position: \"absolute\",\r\n//             marginLeft: \"auto\",\r\n//             marginRight: \"auto\",\r\n//             left: 0,\r\n//             right: 0,\r\n//             textAlign: \"center\",\r\n//             zindex: 8,\r\n//             width: 640,\r\n//             height: 480,\r\n//           }}\r\n//         />\r\n//       {/* </header> */}\r\n//         <Recipe ing={ingredients}/>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// function Recipe(props){\r\n//   console.log(props.ing)\r\n//   const [recipe, setRecipe] = React.useState(\"\");\r\n\r\n//   let lookup = {\r\n//      \"X = zest.\": \"https://www.culinaryhill.com/how-to-zest-a-lemon/\",\r\n//     \"X = nothing.\": \"https://www.allrecipes.com/\"\r\n//   }\r\n\r\n\r\n\r\n//   function displayInfo(e){\r\n//     let ingredientArray = props.ing\r\n//     console.log(ingredientArray)\r\n//          // start tau prolog sesson\r\n//     var session = pl.create();\r\n//     // load recipes.pl file\r\n//     const prolog = `\r\n//       recipe(lemon, zest).\r\n//       recipe(bread, nutella, breadAndNutella).\r\n//       recipe(avocado, bread, egg, avocadoToast).\r\n//       recipe(cheese, tortilla, quesadilla).\r\n//       recipe(bread, cheese, egg, eggAndCheeseToast).\r\n//       recipe(bread, egg, eggInHole).\r\n    \r\n//       recipe(hello, no, nothing).\r\n//     `\r\n//     session.consult(prolog, {\r\n//       success:function(){\r\n//         // query recipes.pl with list of ingredients\r\n//         session.query(\"recipe(\"+ingredientArray.sort()+\", X).\", {\r\n//           success: function(goal){\r\n//             session.answer({\r\n//               success: function(answer){\r\n//                 console.log(session.format_answer(answer));\r\n//                 // call display recipe with result of query\r\n//                 setRecipe(session.format_answer(answer));\r\n//               }\r\n//             });\r\n//           }\r\n//         })\r\n//       },\r\n//       error: function(err){\r\n//         console.log(\"didn't work\")\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   return(\r\n//     <>\r\n//       <button className=\"search-button\" onClick={displayInfo}>\r\n//         Search\r\n//       </button>\r\n//       <div style={{height: 30}}></div>\r\n//       <a className=\"link\" target=\"_blank\" href={lookup[recipe]} >{recipe}</a>\r\n//     </>\r\n//   )\r\n// }\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}